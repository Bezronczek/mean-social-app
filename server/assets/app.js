"use strict";angular.module("social",["ngRoute"]),angular.module("social").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("social").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.createUser=function(n,e){return o.post("/api/users",{username:n,password:e}).then(function(o){return t})}}]),angular.module("social").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){t.fetch().success(function(t){o.posts=t}),o.addPost=function(){o.postBody&&t.create({username:"bezronczek",body:o.postBody}).success(function(t){o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("social").controller("LoginCtrl",["$scope","$location","UserSvc",function(o,t,n){o.login=function(e,r){n.login(e,r).then(function(n){o.$emit("login",n.data),t.path("/")})}}]),angular.module("social").controller("RegisterCtrl",["$scope","$location","UserSvc",function(o,t,n){o.register=function(e,r){n.createUser(e,r).then(function(s){n.login(e,r).then(function(t){return o.$emit("login",t.data)}).then(function(){o.username=null,o.password=null,t.path("/")})})}}]),angular.module("social").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n})}]),angular.module("social").config(["$routeProvider","$locationProvider",function(o,t){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}),t.html5Mode(!0)}]),angular.module("social").run(["$rootScope","$timeout",function(o,t){!function n(){var e="ws://localhost:3000",r=new WebSocket(e);r.onclose=function(o){console.log("WebSocket connection lost. Reconnecting..."),t(n,1e4)},r.onmessage=function(t){var n=t.data,e=JSON.parse(n),r=e.topic,s=e.payload;o.$broadcast("ws:"+r,s)}}()}]);
//# sourceMappingURL=data:application/json;base64,
